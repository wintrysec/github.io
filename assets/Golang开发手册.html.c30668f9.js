import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as k,c as v,a as n,b as s,d as a,w as t,e as l,r as i}from"./app.9e3cc3d3.js";const m={},b=n("h2",{id:"官方文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#官方文档","aria-hidden":"true"},"#"),s(" 官方文档")],-1),g={href:"https://go.dev/doc/effective_go",target:"_blank",rel:"noopener noreferrer"},f={href:"https://pkg.go.dev/std",target:"_blank",rel:"noopener noreferrer"},h={href:"https://tour.go-zh.org/basics/1",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"环境配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#环境配置","aria-hidden":"true"},"#"),s(" 环境配置")],-1),w=n("h3",{id:"windows下多平台交叉编译",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#windows下多平台交叉编译","aria-hidden":"true"},"#"),s(" Windows下多平台交叉编译")],-1),y=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[n("span",{class:"token function"},"set"),s(` CGO_ENABLED=0
`),n("span",{class:"token function"},"set"),s(` GOOS=linux
`),n("span",{class:"token function"},"set"),s(` GOARCH=amd64
go build main`),n("span",{class:"token punctuation"},"."),s(`go
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[s("go build main"),n("span",{class:"token punctuation"},"."),s(`go
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[n("span",{class:"token function"},"set"),s(` CGO_ENABLED=0
`),n("span",{class:"token function"},"set"),s(` GOOS=darwin
`),n("span",{class:"token function"},"set"),s(` GOARCH=amd64
go build main`),n("span",{class:"token punctuation"},"."),s(`go
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=l(`<h3 id="go-install工具应用" tabindex="-1"><a class="header-anchor" href="#go-install工具应用" aria-hidden="true">#</a> Go Install工具应用</h3><p><code>go install</code>工具为公共代码仓库中维护的开源代码而设计。</p><p>无论是否公布代码，该模型设置工作环境的方法都是相同的。</p><p>Go代码必须放在工作空间内，其实就是一个目录，其中包含三个子目录：</p><p>✅src 目录包含Go的源文件，它们被组织成包（每个目录都对应一个包）</p><p>✅pkg 目录包含包对象</p><p>✅bin 目录包含可执行程序</p><p>go 工具用于构建源码包，生成二进制文件到 bin 目录中。</p><p><strong>GOPATH 环境变量</strong></p><p>GOPATH 环境变量指定了工作空间位置。</p><p>工作空间可以放在任何地方， 但是它<strong>绝对不能</strong>和Go安装目录相同。</p><p>首先创建一个工作空间目录，并设置相应的 <code>GOPATH</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token environment constant">$HOME</span>/work
$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/work
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>作为约定，请将此工作空间的 <code>bin</code> 子目录添加到你的 <code>PATH</code> 中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOPATH</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>包路径</strong></p><p>标准库中的包有给定的短路径，比如 <code>&quot;fmt&quot;</code> 和 <code>&quot;net/http&quot;</code>。</p><p>自己的包必须选择一个基本路径，保证不和标准库和其它第三方库冲突。</p><p>用 <code>github.com/user</code> 作为基本路径。在工作空间里创建一个目录， 将源码存放到其中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$GOPATH</span>/src/github.com/wintrysec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="go-mod" tabindex="-1"><a class="header-anchor" href="#go-mod" aria-hidden="true">#</a> Go mod</h3><p>Go Module与 maven 类似是一个包管理工具，控制依赖包版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go mod init 项目名称 <span class="token comment">#初始化当前文件夹,创建go.mod文件</span>
go mod tidy			<span class="token comment">#同步包状态,增加缺少的包删除无用的包</span>
go mod verify		<span class="token comment">#校验依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h2><h3 id="fmt包" tabindex="-1"><a class="header-anchor" href="#fmt包" aria-hidden="true">#</a> fmt包</h3><p>fmt包实现了类似C语言printf和scanf的格式化I/O。Print系列函数会将内容输出到系统的标准输出。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//直接输出内容</span>
fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;在终端打印该信息&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//格式化输出字符串</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//在输出内容的结尾添加一个换行符</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;在终端打印单独一行显示&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//格式化字符串不输出，相当于变量</span>
fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%v&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strings包" tabindex="-1"><a class="header-anchor" href="#strings包" aria-hidden="true">#</a> strings包</h3><h4 id="修剪字符串" tabindex="-1"><a class="header-anchor" href="#修剪字符串" aria-hidden="true">#</a> 修剪字符串</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token string">&quot;!!@@@你好!!,@@@ Gophers@@@!!&quot;</span>

<span class="token comment">//将字符串左侧和右侧中匹配 cutset 中的任一字符的字符去掉</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;@!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//将字符串左侧中匹配 cutset 中的任一字符的字符去掉</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;@!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//将字符串右侧中匹配 cutset 中的任一字符的字符去掉</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimRight</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;@!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">//输出</span>
你好<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">,</span>@@@ Gophers
你好<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">,</span>@@@ Gophers@@@<span class="token operator">!</span><span class="token operator">!</span>
<span class="token operator">!</span><span class="token operator">!</span>@@@你好<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">,</span>@@@ Gophers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="contains" tabindex="-1"><a class="header-anchor" href="#contains" aria-hidden="true">#</a> Contains</h4><p>判断是否存在某个子字符串</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;test1234helloak47888ak47886&quot;</span>

<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;子字符串在 str变量中 返回true&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;子字符串 不在 str变量中 返回false&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="count计算某个子字符串出现的次数" tabindex="-1"><a class="header-anchor" href="#count计算某个子字符串出现的次数" aria-hidden="true">#</a> Count计算某个子字符串出现的次数</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;ak47&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="字符串分割" tabindex="-1"><a class="header-anchor" href="#字符串分割" aria-hidden="true">#</a> 字符串分割</h4><p>Split把字符串分割为字符串数组</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;foo,bar,baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">SplitAfter</span><span class="token punctuation">(</span><span class="token string">&quot;foo,bar,baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//输出</span>
<span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span> <span class="token string">&quot;bar&quot;</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;foo,&quot;</span> <span class="token string">&quot;bar,&quot;</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>
<span class="token comment">//也就是说，Split 会将 s 中的 sep 去掉，而 SplitAfter 会保留 sep分隔符</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span><span class="token string">&quot;foo,bar,baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//带 N 的方法可以通过最后一个参数 n 控制返回的结果中的 slice 中的元素个数，最后一个元素不会分割</span>
<span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span> <span class="token string">&quot;bar,baz&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串是否有某个前缀或后缀" tabindex="-1"><a class="header-anchor" href="#字符串是否有某个前缀或后缀" aria-hidden="true">#</a> 字符串是否有某个前缀或后缀</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//字符串是否以Go开头</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;Gopher&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//字符串是否以go结尾</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;Amigo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串-join-操作" tabindex="-1"><a class="header-anchor" href="#字符串-join-操作" aria-hidden="true">#</a> 字符串 JOIN 操作</h4><p>将字符串数组（或 slice）连接起来可以通过 Join 实现</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;name=xxx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age=xx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//输出 name=xxx&amp;age=xx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将字符串重复几次" tabindex="-1"><a class="header-anchor" href="#将字符串重复几次" aria-hidden="true">#</a> 将字符串重复几次</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ba&quot;</span> <span class="token operator">+</span> strings<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token string">&quot;na&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//输出 banana</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串字串替换" tabindex="-1"><a class="header-anchor" href="#字符串字串替换" aria-hidden="true">#</a> 字符串字串替换</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;oink oink oink&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ky&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;oink oink oink&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oink&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;moo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//输出</span>
oinky oinky oink
moo moo moo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换" aria-hidden="true">#</a> 大小写转换</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strconv包" tabindex="-1"><a class="header-anchor" href="#strconv包" aria-hidden="true">#</a> strconv包</h3><p>strconv包实现了基本数据类型与其字符串表示的转换，主要有： Atoi()、Itia()、parse系列等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str1 <span class="token operator">:=</span> <span class="token string">&quot;100&quot;</span>

<span class="token comment">//将字符串类型的整数转换为int类型</span>
myNum<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>

<span class="token comment">//将int类型数据转换为对应的字符串表示</span>
num1 <span class="token operator">:=</span> <span class="token number">200</span>
str2 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parse系列函数" tabindex="-1"><a class="header-anchor" href="#parse系列函数" aria-hidden="true">#</a> Parse系列函数</h4><p>Parse类函数用于转换字符串为给定类型的值：ParseBool()、ParseFloat()、ParseInt()、ParseUint()</p><h2 id="文件读取性能" tabindex="-1"><a class="header-anchor" href="#文件读取性能" aria-hidden="true">#</a> 文件读取性能</h2><p>Go语言提供了多种读写文件的方式</p><p>1）使用os包中的Open()和Close()函数，配合Read()和Write()方法读写文件。</p><p>此方式较为底层，需手动管理文件的打开和关闭及数据的缓冲区，但具有很高的灵活性和效率。</p><p>2）使用bufio包中的NewReader()和NewWriter()方法读写文件。</p><p>此方式比较高层，会自动进行数据的缓存，可以大幅提升读写效率。</p><p>3）使用ioutil包中的ReadFile()和WriteFile()方法读写文件。</p><p>此方式非常简单，适合用于一次性读取或写入整个文件内容，但是可能会出现内存占用过高的问题。</p><p><strong>下面是几种方式的性能对比（测试文件大小为100MB）</strong></p><table><thead><tr><th style="text-align:left;">读写方式</th><th style="text-align:left;">读取时间</th><th style="text-align:left;">写入时间</th></tr></thead><tbody><tr><td style="text-align:left;">os.Read() 和 os.Write()</td><td style="text-align:left;">0.25s</td><td style="text-align:left;">0.25s</td></tr><tr><td style="text-align:left;">bufio.NewReader()和 bufio.NewWriter()</td><td style="text-align:left;">0.1s</td><td style="text-align:left;">0.1s</td></tr><tr><td style="text-align:left;">ioutil.ReadFile()和 ioutil.WriteFile() <strong>已经弃用</strong></td><td style="text-align:left;">0.6s</td><td style="text-align:left;">0.6s</td></tr></tbody></table><p>可以看出，使用bufio包中的方法读写文件的性能最佳，而使用ioutil包中的方法读写文件的性能最差。但是需要注意的是，性能测试结果可能因系统环境、文件大小、文件类型等因素而有所不同，具体使用时还需要进行实际测试。</p><p><strong>文件写入操作方式上的差异</strong></p><p>1）打开文件，写入内容，关闭文件。如此重复多次</p><p>2）打开文件，写入内容，defer 关闭文件。如此重复多次</p><p>3）打开文件，重复多次写入内容，defer 关闭文件</p><p>第一种慢但是稳定，第二种压栈太多导致崩溃报错，第三种速度快减少了很多打开关闭文件的操作</p><h3 id="bufio读写" tabindex="-1"><a class="header-anchor" href="#bufio读写" aria-hidden="true">#</a> bufio读写</h3><h4 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> Usernames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token comment">//打开文件</span>
file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//创建读取器</span>
reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">{</span>
    line<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    Usernames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>Usernames<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 打开文件以进行写入</span>
Logpath <span class="token operator">:=</span> <span class="token string">&quot;文件路径&quot;</span>
file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>Logpath<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Open File failed for %v. Error: %s&quot;</span><span class="token punctuation">,</span> Logpath<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 创建一个新的 writer 对象</span>
writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token comment">// 写入字符串</span>
<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;text Content&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Writer failed %v. Error: %s&quot;</span><span class="token punctuation">,</span> Logpath<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将缓冲区中的数据刷新到磁盘中</span>
err <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http客户端" tabindex="-1"><a class="header-anchor" href="#http客户端" aria-hidden="true">#</a> HTTP客户端</h2><h3 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求" aria-hidden="true">#</a> GET请求</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	url <span class="token operator">:=</span> <span class="token string">&quot;https://www.baidu.com/&quot;</span>
    
    <span class="token comment">//请求参数设置</span>
	req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Connection&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rememberMe=1&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">//设置http客户端参数</span>
	tr <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>
		TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>InsecureSkipVerify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//忽略https验证</span>
	<span class="token punctuation">}</span>
	client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>
		Transport<span class="token punctuation">:</span> tr<span class="token punctuation">,</span>
		Timeout<span class="token punctuation">:</span>   time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment">//设置超时连接</span>
		CheckRedirect<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> via <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> http<span class="token punctuation">.</span>ErrUseLastResponse <span class="token comment">/* 不进入重定向 */</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

    <span class="token comment">//发送请求</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// handle errorcls</span>
	<span class="token punctuation">}</span>
    <span class="token comment">//关闭网络连接</span>
	<span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">//读取HTTP响应体</span>
	body<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> POST请求</h3><p>基本的客户端设置都和GET方法一样</p><h4 id="发送json数据" tabindex="-1"><a class="header-anchor" href="#发送json数据" aria-hidden="true">#</a> 发送JSON数据</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//要发送的JSON数据</span>
data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;query&quot;</span><span class="token punctuation">:</span>   domain<span class="token punctuation">,</span> <span class="token comment">//替换为域名</span>
    <span class="token string">&quot;fields&quot;</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;parsed.names&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;parsed.extensions.subject_alt_name.dns_names&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token string">&quot;flatten&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">//JSON序列化</span>
jsonData<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 请求参数设置</span>
req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> URL<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">)</span>
req<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span>apiID<span class="token punctuation">,</span> apiSecret<span class="token punctuation">)</span> <span class="token comment">//Basic认证</span>
req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发送form表单数据" tabindex="-1"><a class="header-anchor" href="#发送form表单数据" aria-hidden="true">#</a> 发送form表单数据</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//数据</span>
payload <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token punctuation">}</span>
payload<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
payload<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
payload<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;foo2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 请求参数设置</span>
req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> URL<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json解析" tabindex="-1"><a class="header-anchor" href="#json解析" aria-hidden="true">#</a> JSON解析</h2><p>json.NewDecoder 和 json.Unmarshal 都可以将 JSON 数据解码为 Go 中的结构体。</p>`,86),G=n("p",null,"json.NewDecoder 接受一个 io.Reader 并从中读取 JSON 数据。",-1),O=n("p",null,"这意味着您可以从文件、网络连接或其他任何实现 io.Reader 接口的东西中读取 JSON 数据。",-1),S=n("p",null,"使用 NewDecoder 可避免将整个 JSON 数据读入内存中，这对于处理大型 JSON 数据非常有用。",-1),A=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[n("span",{class:"token function"},"type"),s(" response struct "),n("span",{class:"token punctuation"},"{"),s("\n	Country   string `json:"),n("span",{class:"token string"},'"country"'),s("`\n	City      string `json:"),n("span",{class:"token string"},'"city"'),s("`\n	Isp       string `json:"),n("span",{class:"token string"},'"isp"'),s("`\n"),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token keyword"},"data"),s(` response
err = json`),n("span",{class:"token punctuation"},"."),s("NewDecoder"),n("span",{class:"token punctuation"},"("),s("resp"),n("span",{class:"token punctuation"},"."),s("Body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("Decode"),n("span",{class:"token punctuation"},"("),s("&"),n("span",{class:"token keyword"},"data"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,"json.Unmarshal 接受一个字节切片并将其解码为 Go 中的结构体。",-1),T=n("p",null,"这意味着您需要将 JSON 数据读入内存中的字节切片中，然后将其传递给 json.Unmarshal。",-1),C=n("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[n("pre",{class:"language-powershell"},[n("code",null,[n("span",{class:"token function"},"type"),s(" response struct "),n("span",{class:"token punctuation"},"{"),s("\n	Country   string `json:"),n("span",{class:"token string"},'"country"'),s("`\n	City      string `json:"),n("span",{class:"token string"},'"city"'),s("`\n	Isp       string `json:"),n("span",{class:"token string"},'"isp"'),s("`\n"),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token keyword"},"data"),s(` response
body`),n("span",{class:"token punctuation"},","),s("err := io"),n("span",{class:"token punctuation"},"."),s("ReadAll"),n("span",{class:"token punctuation"},"("),s("resp"),n("span",{class:"token punctuation"},"."),s("Body"),n("span",{class:"token punctuation"},")"),s(`
err = json`),n("span",{class:"token punctuation"},"."),s("Unmarshal"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token punctuation"},","),s("&"),n("span",{class:"token keyword"},"data"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=l(`<h2 id="高并发" tabindex="-1"><a class="header-anchor" href="#高并发" aria-hidden="true">#</a> 高并发</h2><p>Golang并发解决方案goroutine类比协程。协程在内存消耗和切换调度开销都远比线程小。</p><div class="custom-container info"><p class="custom-container-title">goroutine有以下特点</p><p>1）轻量级：创建和销毁非常快速，每个 goroutine 只需要几 KB 的内存，因此可同时创建数百万个</p><p>2）并发安全：goroutine 本质上是协作式调度的，而非抢占式调度，因此不会发生数据竞争问题</p><p>3）通信机制：goroutine 之间可通过通道（channel）进行通信，高效且安全，可以避免锁的使用</p></div><details class="custom-container details"><summary>一个简单的高并发端口扫描示例</summary><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义主机地址结构体</span>
<span class="token keyword">type</span> Addr <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ip   <span class="token builtin">string</span>
	port <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义要扫描的IP地址和端口号</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
	ips        <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;172.16.51.221&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.16.51.18&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.16.50.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.16.50.4&quot;</span><span class="token punctuation">}</span>
	ports      <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">445</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">}</span>
	AliveHosts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>     <span class="token comment">//存活服务结果存放数组</span>
	timeout    <span class="token builtin">int64</span>    <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">//连接超时时间</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义协程数量</span>
<span class="token keyword">const</span> maxGoroutines <span class="token operator">=</span> <span class="token number">50</span>

<span class="token comment">// 定义等待组</span>
<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 初始化通道</span>
	Addrs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Addr<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">len</span><span class="token punctuation">(</span>ports<span class="token punctuation">)</span><span class="token punctuation">)</span>
	results <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">len</span><span class="token punctuation">(</span>ports<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">//接收结果</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
			wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//收到结果,计数器减一</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 启动协程</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxGoroutines<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> Addrs <span class="token punctuation">{</span>
				<span class="token function">PortConnect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> results<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>
				wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//完成一个任务,计数器减一</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 向通道中添加任务（添加扫描目标）</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> ips <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> port <span class="token operator">:=</span> <span class="token keyword">range</span> ports <span class="token punctuation">{</span>
			wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//添加一个任务,计数器加一</span>
			Addrs <span class="token operator">&lt;-</span> Addr<span class="token punctuation">{</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 等待所有协程完成</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 关闭通道,必须在wg.Wait之后</span>
	<span class="token function">close</span><span class="token punctuation">(</span>Addrs<span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token comment">// TCP Connect-端口连接测试</span>
<span class="token keyword">func</span> <span class="token function">PortConnect</span><span class="token punctuation">(</span>addr Addr<span class="token punctuation">,</span> res <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">string</span><span class="token punctuation">,</span> timeout <span class="token builtin">int64</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ip<span class="token punctuation">,</span> port <span class="token operator">:=</span> addr<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> addr<span class="token punctuation">.</span>port
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;tcp4&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%v&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

	<span class="token comment">//关闭网络连接</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> conn <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">//产出结果,计数器加一</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		res <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%v&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>推荐阅读下面的这篇文章来理解Golang的高并发</p>`,5),j={href:"https://strikefreedom.top/archives/high-performance-implementation-of-goroutine-pool",target:"_blank",rel:"noopener noreferrer"},H=l(`<h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p>Golang通过panic抛出异常，然后在defer中，通过recover捕获异常并处理。</p><p>panic 的中文翻译为 恐慌，当程序遇到错误的时候就会恐慌造成程序崩溃！</p><p><code>defer</code>语句将一个函数推迟到当前函数返回前执行。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;errors&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">GetBallVolumn</span><span class="token punctuation">(</span>radius <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>vol <span class="token builtin">float64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> radius <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token comment">//直接panic程序不会崩溃,但是后边的程序语句不会再执行</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;小球半径不能为负数(From GetBallVolumn Func)&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    
    <span class="token comment">//一种温和的错误提示，而不是直接 panic 让程序崩溃掉</span>
    <span class="token comment">//定义错误信息，如果存在则直接return</span>
	<span class="token keyword">if</span> radius <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">||</span> radius <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;半径的合法范围是5~50&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">//没错误err返回nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">//在函数结束之前处理异常</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;严重错误警告: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	volumn<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetBallVolumn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

	<span class="token comment">//如果存在错误则提示错误信息</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;获取体积失败，err=&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;小球的体积是：&quot;</span><span class="token punctuation">,</span> volumn<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;程序运行结束&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匿名函数和defer" tabindex="-1"><a class="header-anchor" href="#匿名函数和defer" aria-hidden="true">#</a> 匿名函数和defer</h2><p>匿名函数和defer语句不能乱用。</p><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><p>匿名函数是一种没有名称的函数，它可以在代码中直接定义和使用。</p><p>匿名函数可以在函数内部定义，也可以作为函数参数或返回值。</p><div class="custom-container danger"><p class="custom-container-title">匿名函数的副作用主要有以下几点</p><p>1）可能会导致内存泄漏：匿名函数中使用外部变量时，会形成闭包，如果外部变量一直被引用，那么它所占用的内存就不会被释放，从而导致内存泄漏。</p><p>2）可能会导致并发问题：匿名函数中使用外部变量时，如果多个协程同时访问这个变量，可能会引发并发问题，如竞态条件等。</p><p>3）可能会影响代码可读性：过度使用匿名函数会使代码变得难以阅读和理解，从而降低代码的可维护性和可扩展性。</p></div><div class="custom-container tip"><p class="custom-container-title">如何合理应用匿名函数</p><p>1）可以作为函数参数或返回值，这种方式可以使代码更加灵活和可扩展</p><p>2）可以作为协程的执行体，这种方式可以方便地实现并发编程</p><p>3）可以形成闭包，访问外部变量，从而实现一些有用的功能，如函数柯里化、延迟执行等</p></div><h3 id="defer语句" tabindex="-1"><a class="header-anchor" href="#defer语句" aria-hidden="true">#</a> defer语句</h3><p><code>defer</code>语句可以用于在函数返回时执行某个操作，无论函数是正常返回还是发生了异常。</p><div class="custom-container danger"><p class="custom-container-title">过度使用defer语句的危害</p><p>当一个函数中存在大量的<code>defer</code>语句时，这些语句会被添加到函数的调用栈中，并在函数返回时按照相反的顺序执行，这可能会导致函数的运行速度变慢，尤其是在函数被频繁调用的情况下。</p></div><div class="custom-container tip"><p class="custom-container-title">defer使用场景</p><p>1）进行资源的释放：如文件句柄、网络连接、数据库连接等资源的释放。</p><p>2）锁的释放：如互斥锁、读写锁等锁的释放。</p><p>3）延迟执行某个操作：如对某个函数的延迟调用，或者对某个操作的延迟执行。</p></div><p><strong>关于retrun</strong></p><p>在函数没有返回值的情况下是没有必要的。</p><p>如果在函数中遇到了某些错误，你可能希望立即返回，而不是继续执行后面的代码。</p><p>在这种情况下，可以使用<code>return</code>语句来提前结束函数的执行。</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型编程是一种计算机编程风格，编程范式，其中算法是根据稍后指定的类型编写的，然后在需要时为作为参数提供的特定类型实例化。</p><div class="custom-container tip"><p class="custom-container-title">泛型有以下特点</p><p>1）类型的参数化：把类型当做函数参数传递。</p><p>2）更强的类型检查：可以在编译期间对类型进行检查，减少运行时由于对象类型不匹配引发的异常</p><p>3）代码节省与抽象呈现</p></div><h4 id="示例如下" tabindex="-1"><a class="header-anchor" href="#示例如下" aria-hidden="true">#</a> 示例如下</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 声明类型约束(整型和浮点型)</span>
<span class="token keyword">type</span> Number <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int64</span> <span class="token operator">|</span> <span class="token builtin">float64</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通用型函数,自动判断参数的类型</span>
<span class="token comment">// 在[]括号内，声明两个类型参数K和V，以及一个使用类型参数的参数m map[K]V</span>
<span class="token keyword">func</span> SumIntsOrFloats<span class="token punctuation">[</span>K comparable<span class="token punctuation">,</span> V Number<span class="token punctuation">]</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span>V<span class="token punctuation">)</span> V <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s V <span class="token comment">//声明的s变量可能是整型 也可能是浮点型</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		s <span class="token operator">+=</span> v
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Initialize a map for the integer values</span>
	ints <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span>
		<span class="token string">&quot;first&quot;</span><span class="token punctuation">:</span>  <span class="token number">34</span><span class="token punctuation">,</span>
		<span class="token string">&quot;second&quot;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Initialize a map for the float values</span>
	floats <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span>
		<span class="token string">&quot;first&quot;</span><span class="token punctuation">:</span>  <span class="token number">35.98</span><span class="token punctuation">,</span>
		<span class="token string">&quot;second&quot;</span><span class="token punctuation">:</span> <span class="token number">26.99</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//引用泛型函数，自动判断参数类型</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Generic Sums: %v and %v\\n&quot;</span><span class="token punctuation">,</span>
		<span class="token function">SumIntsOrFloats</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">SumIntsOrFloats</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function E(D,B){const e=i("ExternalLinkIcon"),u=i("CodeTabs"),r=i("Tabs");return k(),v("div",null,[b,n("p",null,[s("💫"),n("a",g,[s("Golang语法"),a(e)])]),n("p",null,[s("☢️"),n("a",f,[s("Golang标准库"),a(e)])]),n("p",null,[s("☣️"),n("a",h,[s("Go语言之旅（交互式教程-适合零基础人群）"),a(e)])]),q,w,a(u,{id:"18",data:[{title:"Linux"},{title:"Windows"},{title:"Mac"}],"tab-id":"shell"},{tab0:t(({title:p,value:o,isActive:c})=>[y]),tab1:t(({title:p,value:o,isActive:c})=>[x]),tab2:t(({title:p,value:o,isActive:c})=>[_]),_:1}),P,a(r,{id:"294",data:[{title:"NewDecoder"},{title:"Unmarshal"}]},{tab0:t(({title:p,value:o,isActive:c})=>[G,O,S,A]),tab1:t(({title:p,value:o,isActive:c})=>[N,T,C]),_:1}),R,n("p",null,[n("a",j,[s("GMP 并发调度器深度解析之手撸一个高性能 goroutine pool"),a(e)])]),H])}const W=d(m,[["render",E],["__file","Golang开发手册.html.vue"]]);export{W as default};
