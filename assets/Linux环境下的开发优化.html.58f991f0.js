import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c,d,w as s,e as p,r as u,a,b as e}from"./app.0f6a2e4c.js";const m={},b=p(`<h2 id="文件内容乱码怎么办" tabindex="-1"><a class="header-anchor" href="#文件内容乱码怎么办" aria-hidden="true">#</a> 文件内容乱码怎么办？</h2><p>由于windows上文件的结束符和linux上的不同，那么在windows上编写的文件在Linux上就会报错： /bin/sh ^M: bad interpreter: No such file or directory</p><p>解决办法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">&quot;*.sh&quot;</span> <span class="token operator">|</span> <span class="token function">xargs</span> dos2unix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="文件名乱码怎么解决" tabindex="-1"><a class="header-anchor" href="#文件名乱码怎么解决" aria-hidden="true">#</a> 文件名乱码怎么解决？</h2><p>在windows上使用ftp上传文件到Linux上，中文名称在Linux系统中显示为乱码。</p><p>原因在于，Windows 的文件名中文编码默认为GBK，压缩或者上传后，文件名还会是GBK编码，而Linux中默认文件名编码为UTF8。由于编码不一致所以导致了文件名乱码的问题，解决这个问题需要对文件名进行转码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> convmv
convmv <span class="token parameter variable">-f</span> gbk <span class="token parameter variable">-t</span> utf-8 <span class="token parameter variable">-r</span> <span class="token parameter variable">--notest</span> /home/wwwroot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="因mongodb日志过大导致存储空间不足" tabindex="-1"><a class="header-anchor" href="#因mongodb日志过大导致存储空间不足" aria-hidden="true">#</a> 因MongoDB日志过大导致存储空间不足</h2>`,9),h=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token comment"},"#找到占用空间大的文件，并删除 "),e(`
`),a("span",{class:"token builtin class-name"},"cd"),e(" /"),a("span",{class:"token punctuation"},";"),a("span",{class:"token function"},"df"),e(),a("span",{class:"token parameter variable"},"-h"),e(`
`),a("span",{class:"token function"},"find"),e(" / "),a("span",{class:"token parameter variable"},"-xdev"),e(),a("span",{class:"token parameter variable"},"-size"),e(" +1000M "),a("span",{class:"token parameter variable"},"-exec"),e(),a("span",{class:"token function"},"ls"),e(),a("span",{class:"token parameter variable"},"-l"),e(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),e(),a("span",{class:"token punctuation"},"\\"),a("span",{class:"token punctuation"},";"),e(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),v=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,`？？？
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1);function _(k,f){const n=u("CodeTabs");return r(),c("div",null,[b,d(n,{id:"23",data:[{title:"手动处理"},{title:"自动处理"}],"tab-id":"shell"},{tab0:s(({title:t,value:i,isActive:l})=>[h]),tab1:s(({title:t,value:i,isActive:l})=>[v]),_:1})])}const w=o(m,[["render",_],["__file","Linux环境下的开发优化.html.vue"]]);export{w as default};
