import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,e as a,a as n,b as s}from"./app.0655d585.js";const p={},l=a(`<h1 id="增删查改" tabindex="-1"><a class="header-anchor" href="#增删查改" aria-hidden="true">#</a> 增删查改</h1><h2 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> DATABASE_NAME
<span class="token comment">--如果数据库不存在，则创建数据库，否则切换到指定数据库。</span>
<span class="token comment">--如果你想查看所有数据库，可以使用 show dbs 命令。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库" aria-hidden="true">#</a> 删除数据库</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">--集合删除语法格式如下：</span>
db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token keyword">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建集合" tabindex="-1"><a class="header-anchor" href="#创建集合" aria-hidden="true">#</a> 创建集合</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">)</span>

<span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token comment">--查看已有集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入文档" tabindex="-1"><a class="header-anchor" href="#插入文档" aria-hidden="true">#</a> 插入文档</h2><p>文档的数据结构和 JSON 基本一样。</p><p>所有存储在集合中的数据都是 BSON 格式。</p><p>BSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。</p><p>MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col_name<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>
{
    title: <span class="token string">&#39;MongoDB&#39;</span><span class="token punctuation">,</span> 
    url: <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span>
    tags: <span class="token punctuation">[</span><span class="token string">&#39;mongodb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;database&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    likes: <span class="token number">100</span>
}
<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档" aria-hidden="true">#</a> 更新文档</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>query<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token operator">&lt;</span><span class="token keyword">update</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  {
    upsert: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    multi: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  }
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),i=n("ul",null,[n("li",null,[n("strong",null,"query"),s(" : update的查询条件，类似sql update查询内where后面的。")]),n("li",null,[n("strong",null,"update"),s(" : update的对象和一些更新的操作符（如"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{separator:"true"},",")]),n("annotation",{encoding:"application/x-tex"},",")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3em","vertical-align":"-0.1944em"}}),n("span",{class:"mpunct"},",")])])]),s("inc...）等，也可以理解为sql update查询内set后面的")]),n("li",null,[n("strong",null,"upsert"),s(" : 如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。")]),n("li",null,[n("strong",null,"multi"),s(" : 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。")])],-1),d=a(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
    {<span class="token string">&#39;title&#39;</span>:<span class="token string">&#39;MongoDB 教程&#39;</span>}<span class="token punctuation">,</span>
    {$<span class="token keyword">set</span>:{<span class="token string">&#39;title&#39;</span>:<span class="token string">&#39;MongoDB&#39;</span>}}<span class="token punctuation">,</span>
    {multi:<span class="token boolean">true</span>}<span class="token punctuation">,</span>
    {upsert:<span class="token boolean">true</span>}
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除文档" tabindex="-1"><a class="header-anchor" href="#删除文档" aria-hidden="true">#</a> 删除文档</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--移除 title 为 &#39;MongoDB 教程&#39; 的文档：</span>
<span class="token operator">&gt;</span>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">&#39;title&#39;</span>:<span class="token string">&#39;MongoDB 教程&#39;</span>}<span class="token punctuation">)</span>
WriteResult<span class="token punctuation">(</span>{ <span class="token string">&quot;nRemoved&quot;</span> : <span class="token number">2</span> }<span class="token punctuation">)</span>

<span class="token comment">--如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：</span>
<span class="token operator">&gt;</span>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">&#39;title&#39;</span>:<span class="token string">&#39;MongoDB 教程&#39;</span>}，<span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询文档" tabindex="-1"><a class="header-anchor" href="#查询文档" aria-hidden="true">#</a> 查询文档</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="limit方法" tabindex="-1"><a class="header-anchor" href="#limit方法" aria-hidden="true">#</a> limit方法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</span>
db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{}<span class="token punctuation">,</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span><span class="token punctuation">,</span>_id:<span class="token number">0</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="skip方法" tabindex="-1"><a class="header-anchor" href="#skip方法" aria-hidden="true">#</a> skip方法</h3><p>使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p><p>以下实例只会显示第二条文档数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{}<span class="token punctuation">,</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span><span class="token punctuation">,</span>_id:<span class="token number">0</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><p>sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式</p><p>其中 1 为升序排列，而 -1 是用于降序排列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{}<span class="token punctuation">,</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span><span class="token punctuation">,</span>_id:<span class="token number">0</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{<span class="token string">&quot;likes&quot;</span>:<span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h3><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p><p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p><p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p><p><strong>MongoDB使用 createIndex() 方法来创建索引。</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--createIndex()方法基本语法格式如下所示：</span>
<span class="token operator">&gt;</span>db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span><span class="token keyword">keys</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

<span class="token comment">--语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可</span>
<span class="token operator">&gt;</span>db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">&quot;title&quot;</span>:<span class="token number">1</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h3><p>主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。</p><p>有点类似 <strong>SQL</strong> 语句中的 <code>count(\\*)</code> MongoDB中聚合的方法使用aggregate()。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>mycol<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span>{$<span class="token keyword">group</span> : {_id : <span class="token string">&quot;$by_user&quot;</span><span class="token punctuation">,</span> num_tutorial : {$sum : <span class="token number">1</span>}}}<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">--以上实例类似sql语句：</span>
<span class="token keyword">select</span> by_user<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> mycol <span class="token keyword">group</span> <span class="token keyword">by</span> by_user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据库备份" tabindex="-1"><a class="header-anchor" href="#数据库备份" aria-hidden="true">#</a> 数据库备份</h1><h2 id="mongodb-分片" tabindex="-1"><a class="header-anchor" href="#mongodb-分片" aria-hidden="true">#</a> MongoDB 分片</h2><p>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。</p><p>当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。</p><p>这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p><h2 id="mongodb-备份" tabindex="-1"><a class="header-anchor" href="#mongodb-备份" aria-hidden="true">#</a> MongoDB 备份</h2><p>在Mongodb中使用mongodump命令来备份MongoDB数据；该命令可以导出所有数据到指定目录中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mongodump <span class="token parameter variable">-h</span> db_host <span class="token parameter variable">-d</span> db_name <span class="token parameter variable">-o</span> db_directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-h：MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</li><li>-d：需要备份的数据库实例，例如：test</li><li>-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立</li><li>在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据</li></ul><h2 id="mongodb-恢复" tabindex="-1"><a class="header-anchor" href="#mongodb-恢复" aria-hidden="true">#</a> MongoDB 恢复</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mongorestore <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span><span class="token operator">&lt;</span>:port<span class="token operator">&gt;</span> <span class="token parameter variable">-d</span> db_name <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>--host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址，默认为： localhost:27017</li><li>--db , -d ：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</li><li>--drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用！</li><li>--dir：指定备份的目录，例如：c:\\data\\dump\\test</li></ul><h1 id="性能监控" tabindex="-1"><a class="header-anchor" href="#性能监控" aria-hidden="true">#</a> 性能监控</h1><h2 id="mongostat-命令" tabindex="-1"><a class="header-anchor" href="#mongostat-命令" aria-hidden="true">#</a> mongostat 命令</h2><p>mongostat是mongodb自带的<strong>状态检测</strong>工具，在命令行下使用。</p><p>它会间隔固定时间获取mongodb的当前运行状态，并输出。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>insert query update delete getmore command dirty used flushes vsize  res qrw arw net_in net_out conn         time

  *0  1042   832   *0    0  1878|0  0.0% 0.0%    0 1.05G 62.0M 0|0 1|1  465k  12.0m   4 Apr 28 11:11:22.325
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>inserts</td><td>每秒插入次数</td></tr><tr><td>Query</td><td>每秒查询次数</td></tr><tr><td>Update</td><td>每秒更新次数</td></tr><tr><td>Delete</td><td>每秒删除次数</td></tr><tr><td>Getmore</td><td>每秒执行getmore次数,查看更多的意思,我们每次查询数据时,如果一次数据量比较大,超过了mongodb一次能查询的最大数据量,那么mongodb就回把这次要查询的数据分成几次查询,分别返回</td></tr><tr><td>Command</td><td>每秒的命令数，比以上插入、查找、更新、删除的综合还多，还统计了别的命令</td></tr><tr><td>Dirty</td><td>WiredTiger存储引擎中dirty 数据占缓存百分比</td></tr><tr><td>Used</td><td>WiredTiger存储引擎中引擎使用缓存占百分比</td></tr><tr><td>Flushes</td><td>每秒执行fsync将数据写入硬盘的次数, WiredTiger存储引擎中,flushes是指WiredTiger循环创建检查点的时间间隔。每隔一段时间,mongodb就将内存上的数据写入硬盘,如果这个数值比较大的话,会影响性能</td></tr><tr><td>Vsize</td><td>虚拟内存使用量，单位MB</td></tr><tr><td>Res</td><td>物理内存使用量，单位MB</td></tr><tr><td>Qrw</td><td>客户端 等待读的长度队列中的长度 等待写的队列长度</td></tr><tr><td>Arw</td><td>活跃客户 执行写操作的数量 和 等待写的数量</td></tr><tr><td>Netin</td><td>mongodb进入的流量包含mongostat本身（单位：bytes）</td></tr><tr><td>Netout</td><td>mongodb出去的流量包含mongostat本身</td></tr><tr><td>Conn</td><td>当前连接数</td></tr><tr><td>Time</td><td>时间戳</td></tr></tbody></table><h2 id="mongotop-命令" tabindex="-1"><a class="header-anchor" href="#mongotop-命令" aria-hidden="true">#</a> mongotop 命令</h2><p>mongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。</p><p>mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。</p><table><thead><tr><th>Ns</th><th>Total</th><th>Read</th><th>write</th></tr></thead><tbody><tr><td>webapp.tasks</td><td>159ms</td><td>81ms</td><td>78ms</td></tr><tr><td>admin.system.roles</td><td>0ms</td><td>0ms</td><td>0ms</td></tr></tbody></table><p>输出结果字段说明：</p><ul><li>ns：包含数据库命名空间，后者结合了数据库名称和集合。</li><li>total：在此命名空间，花费的总时间</li><li>read： 在此命名空间，执行读操作花费的时间</li><li>write：在此命名空间，执行写操作花费的时间</li></ul>`,49),c=[l,i,d];function r(u,m){return e(),o("div",null,c)}const v=t(p,[["render",r],["__file","MongoDB.html.vue"]]);export{v as default};
